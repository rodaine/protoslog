// Package main is the protoc-gen-slog plugin
package main

import (
	"google.golang.org/protobuf/compiler/protogen"
)

const (
	slogPackage      = "log/slog"
	protoslogPackage = "github.com/rodaine/protoslog"
)

//nolint:gochecknoglobals // these are effectively constants
var (
	slogValueIdent = protogen.GoIdent{
		GoName:       "Value",
		GoImportPath: slogPackage,
	}
	slogValuerIdent = protogen.GoIdent{
		GoName:       "LogValuer",
		GoImportPath: slogPackage,
	}
	protoslogMessageValueIdent = protogen.GoIdent{
		GoName:       "MessageValue",
		GoImportPath: protoslogPackage,
	}
)

func main() { protogen.Options{}.Run(run) }

func run(plugin *protogen.Plugin) error {
	for _, file := range plugin.Files {
		if !file.Generate || len(file.Messages) == 0 {
			continue
		}

		genFilePath := file.GeneratedFilenamePrefix + ".slog.pb.go"
		genFile := plugin.NewGeneratedFile(genFilePath, file.GoImportPath)

		genFile.P("// Code generated by protoc-gen-slog. DO NOT EDIT.")
		genFile.P()
		genFile.P("package ", file.GoPackageName)
		for _, msg := range file.Messages {
			handleMessage(msg, genFile)
		}
	}
	return nil
}

func handleMessage(msg *protogen.Message, genFile *protogen.GeneratedFile) {
	if msg.Desc.IsMapEntry() {
		return
	}

	genFile.P()
	genFile.P("// LogValue satisfies the [", slogValuerIdent, "] interface.")
	genFile.P("func (msg *", msg.GoIdent, ") LogValue() ", slogValueIdent, " {")
	genFile.P("\treturn ", protoslogMessageValueIdent, "(msg)")
	genFile.P("}")

	for _, submsg := range msg.Messages {
		handleMessage(submsg, genFile)
	}
}
